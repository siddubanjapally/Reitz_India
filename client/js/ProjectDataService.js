// Generated by CoffeeScript 1.6.3
(function() {
  (angular.module('reitz')).factory('projectservice', function($rootScope) {
    var CalcNormalDensity, CalculateDensity, Density, FanCoeffients, calculateVp, checkingOperatingPont, convertDpt, convertVp, createJson, data, density, editdata, entitykeyNew, genearateJson, genrateId, guid, postdata, tempViscObject;
    calculateVp = function(condition) {
      var x;
      switch (condition) {
        case "M3/S":
          return x = parseFloat(1);
        case "M3/M":
          return x = parseFloat(60);
        case "M3/H":
          return x = parseFloat(3600);
        case "NM3/S":
          return x = parseFloat(1);
        case "NM3/M":
          return x = parseFloat(60);
        case "NM3/H":
          return x = parseFloat(3600);
      }
    };
    CalcNormalDensity = function(condition) {
      var x;
      switch (condition) {
        case "PA":
          return x = parseFloat(1);
        case "MMwg":
          return x = parseFloat(0.101);
        case "Mbar":
          return x = parseFloat(0.01);
        case "Dapa":
          return x = parseFloat(10);
      }
    };
    Density = function(condition, operate) {
      var x;
      switch (condition) {
        case "PA":
          return x = parseInt(operate);
        case "MMwg":
          return x = parseInt(operate) * 9.81;
        case "Mbar":
          return x = parseInt(operate) / 0.01;
        case "Dapa":
          return x = parseInt(operate) / 10;
      }
    };
    CalculateDensity = function(condition, operate, Alt, T) {
      var baroPres, staticPressure;
      staticPressure = parseFloat(Density(condition, operate)) / 9.81;
      baroPres = 760 * (Math.E ^ (-0.000125 * parseInt(Alt)));
      return (1.293 * (273 / (273 + parseInt(T))) * (baroPres - (0.0737 * staticPressure)) / 760).toFixed(5);
    };
    convertVp = function(vp, units) {
      console.log('from convertVp function', vp, units);
      if (units === 'M3/S' || units === 'NM3/S') {
        return vp;
      } else if (units === 'M3/M' || units === 'NM3/M') {
        console.log(vp / 60);
        return vp / 60;
      } else if (units === 'M3/H' || units === 'NM3/H') {
        return vp / 3600;
      }
    };
    convertDpt = function(dpt, units) {
      console.log('from convertDpt', dpt, units);
      if (units === 'PA') {
        console.log(dpt);
        return dpt;
      } else if (units === 'MMwg') {
        console.log(dpt / 9.81);
        return dpt / 9.81;
      } else if (units === 'Mbar') {
        console.log(dpt / 100);
        return dpt / 100;
      } else if (units === 'Dapa') {
        console.log(dpt / 10);
        return dpt / 10;
      }
    };
    postdata = {};
    FanCoeffients = [];
    editdata = null;
    genrateId = function() {
      var id;
      id = 0;
      return function() {
        return ++id;
      };
    };
    data = {
      VpOrig: [],
      dptOrig: [],
      countVariables: {
        VpCount: 0,
        DptCount: 0
      },
      Proposal_OrderNo: '',
      GasOperatingPoint: {
        T: '',
        P1: 0,
        F: 0,
        Dpt: '',
        Vp: '',
        Ro: ''
      },
      GasOperatingPoints: [
        {
          T: '',
          P1: 0,
          F: 0,
          Dpt: '',
          Vp: '',
          Ro: '',
          Vi: '',
          At: ''
        }
      ],
      FanAssemblies: {
        InletSoundSilencer: '0',
        EvaseOutlet_InletAreaRatio: '0',
        InletBox: '0',
        OutletSilencer: '0',
        OutletOtherParts: '0',
        InletOtherParts: '0',
        Pressure_Difference: '0'
      },
      GasDatas: {
        BarometricPressure_Elevation: 0.0,
        GasDustload: 0,
        VpUnit: '1',
        DptUnit: '1',
        VpUnits: 'M3/S',
        DptUnits: 'PA'
      },
      MaterialDriveControls: {
        DesignType: null,
        Width: '1',
        BackBlades: false,
        StandardImpellerMaterial: true,
        IECStandardMotor: false,
        NominalMotorSpeed: null,
        MotorSpeed: 0,
        MotorPower: 0,
        NoiseDataRequired: 0,
        MaterialYieldStrength: 0,
        IVCPosition: false,
        Drive: 'K',
        MaterialName: null,
        MaterialDensity: 0,
        direct: true
      },
      Noises: {
        Design: 0,
        FanLocation: 1,
        HousingMaterial: 0,
        RoomAbsorptionArea: '0',
        HousingMetalPlateThickness: '0',
        DistanceBetweenStiffners: 0,
        BackgroundNoiseCorrection: '0'
      }
    };
    entitykeyNew = function(name) {
      return {
        $id: id().toString(),
        EntitySetName: name,
        EntityContainerName: "FanalytixEntities",
        EntityKeyValues: [
          {
            Key: "Id",
            Type: "System.Guid",
            Value: this.guid()
          }
        ]
      };
    };
    tempViscObject = [
      {
        temp: 0,
        visc: 17
      }, {
        temp: 30,
        visc: 18.5
      }, {
        temp: 40,
        visc: 19
      }, {
        temp: 50,
        visc: 19.5
      }, {
        temp: 60,
        visc: 19.9
      }, {
        temp: 70,
        visc: 20.4
      }, {
        temp: 80,
        visc: 20.8
      }, {
        temp: 90,
        visc: 21.3
      }, {
        temp: 100,
        visc: 21.7
      }, {
        temp: 110,
        visc: 22.1
      }, {
        temp: 120,
        visc: 22.5
      }, {
        temp: 130,
        visc: 23
      }, {
        temp: 140,
        visc: 23.4
      }, {
        temp: 150,
        visc: 23.8
      }, {
        temp: 160,
        visc: 24.2
      }, {
        temp: 180,
        visc: 25
      }, {
        temp: 200,
        visc: 25.6
      }, {
        temp: 220,
        visc: 26.4
      }, {
        temp: 250,
        visc: 27.6
      }, {
        temp: 280,
        visc: 28.6
      }, {
        temp: 300,
        visc: 29.3
      }, {
        temp: 320,
        visc: 30
      }, {
        temp: 330,
        visc: 30.3
      }, {
        temp: 340,
        visc: 30.7
      }, {
        temp: 350,
        visc: 31
      }, {
        temp: 360,
        visc: 31.2
      }, {
        temp: 380,
        visc: 32
      }, {
        temp: 400,
        visc: 32.6
      }, {
        temp: 420,
        visc: 33.2
      }, {
        temp: 450,
        visc: 34
      }, {
        temp: 500,
        visc: 35.5
      }, {
        temp: 550,
        visc: 36.9
      }, {
        temp: 600,
        visc: 38.3
      }, {
        temp: 650,
        visc: 39.6
      }
    ];
    density = function(temp) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = tempViscObject.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (tempViscObject[i].temp === +temp) {
          return tempViscObject[i].visc + 'e-6';
        } else if (tempViscObject[i].temp < +temp && +temp < tempViscObject[i + 1].temp && +temp <= 650) {
          return ((tempViscObject[i].visc + tempViscObject[i + 1].visc) / 2) + 'e-6';
        }
      }
    };
    guid = function() {
      var CHARS, chars, i, r, rnd, uuid;
      CHARS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
      chars = CHARS;
      uuid = new Array(36);
      rnd = 0;
      r = void 0;
      i = 0;
      while (i < 36) {
        if (i === 8 || i === 13 || i === 18 || i === 23) {
          uuid[i] = "-";
        } else if (i === 14) {
          uuid[i] = "4";
        } else {
          if (rnd <= 0x02) {
            rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;
          }
          r = rnd & 0xf;
          rnd = rnd >> 4;
          uuid[i] = chars[(i === 19 ? (r & 0x3) | 0x8 : r)];
        }
        i++;
      }
      return uuid.join("");
    };
    checkingOperatingPont = function(data) {
      var i;
      i = 0;
      if (data.GasOperatingPoint.Ro !== '' && data.GasOperatingPoint.Vp !== '' && data.GasOperatingPoint.T !== '' && data.GasOperatingPoint.Dpt !== '') {
        if (data.GasOperatingPoint.T !== '0' && data.GasOperatingPoint.Ro !== '0' && data.GasOperatingPoint.Vp !== '0' && data.GasOperatingPoint.Dpt !== '0') {
          if (data.GasOperatingPoints.length === 0) {
            data.GasOperatingPoints.push(data.GasOperatingPoint);
          } else {
            _.each(data.GasOperatingPoints, function(ob) {
              i += 1;
              if (i === data.GasOperatingPoints.length) {
                if (ob.Ro !== data.GasOperatingPoint.Ro && ob.Vp !== data.GasOperatingPoint.Vp) {
                  data.GasOperatingPoints.push(data.GasOperatingPoint);
                  return i = 0;
                }
              }
            });
          }
        }
      }
      return data = data;
    };
    genearateJson = function(data) {
      return console.log(data);
    };
    createJson = function(state, data) {
      var id, obj;
      console.log(data);
      console.log(state, data);
      if (state === 'new') {
        id = genrateId();
        obj = {
          $id: id().toString(),
          Date: data.Date,
          Engineer: data.Engineer,
          ProjectName: data.ProjectName,
          Proposal_OrderNo: data.Proposal_OrderNo,
          LastUiFormCompleted: null,
          Id: guid(),
          FanAssemblies: [
            {
              $id: id().toString(),
              Id: guid(),
              FanProjectId: guid(),
              EvaseOutlet_InletAreaRatio: +data.FanAssemblies.EvaseOutlet_InletAreaRatio,
              OutletSilencer: +data.FanAssemblies.OutletSilencer,
              OutletOtherParts: +data.FanAssemblies.OutletOtherParts,
              InletSoundSilencer: +data.FanAssemblies.InletSoundSilencer,
              InletBox: +data.FanAssemblies.InletBox,
              InletOtherParts: +data.FanAssemblies.InletOtherParts,
              PressureDifference: +data.FanAssemblies.Pressure_Difference,
              FanProject: {
                $ref: "1"
              },
              EntityKey: {
                $id: id().toString(),
                EntitySetName: "FanAssemblies",
                EntityContainerName: "FanalytixEntities",
                EntityKeyValues: [
                  {
                    Key: "Id",
                    Type: "System.Guid",
                    Value: guid()
                  }
                ]
              }
            }
          ],
          FanTypes: [],
          GasDatas: [
            {
              $id: id().toString(),
              BarometricPressure_Elevation: +data.GasDatas.BarometricPressure_Elevation,
              GasDustload: data.GasDatas.GasDustload,
              Id: guid(),
              FanProjectId: guid(),
              VpUnit: calculateVp(data.GasDatas.VpUnits),
              DptUnit: CalcNormalDensity(data.GasDatas.DptUnits),
              FanProject: {
                $ref: "1"
              },
              EntityKey: {
                $id: id().toString(),
                EntitySetName: "GasDatas",
                EntityContainerName: "FanalytixEntities",
                EntityKeyValues: [
                  {
                    Key: "Id",
                    Type: "System.Guid",
                    Value: guid()
                  }
                ]
              }
            }
          ],
          UnitValueForInputFields: [],
          MaterialDriveControls: [
            {
              $id: id().toString(),
              InletOutletDuct: +data.MaterialDriveControls.InletOutletDuct,
              Width: +data.MaterialDriveControls.Width,
              DesignType: data.MaterialDriveControls.DesignType,
              BackBlades: data.MaterialDriveControls.BackBlades,
              Control: +data.MaterialDriveControls.Control,
              IVCPosition: data.MaterialDriveControls.IVCPosition,
              MechanicalDesignTemperature: +data.MaterialDriveControls.MechanicalDesignTemperature,
              StandardImpellerMaterial: data.MaterialDriveControls.StandardImpellerMaterial,
              MaterialName: data.MaterialDriveControls.MaterialName,
              MaterialDensity: +data.MaterialDriveControls.MaterialDensity || null,
              MaterialYieldStrength: +data.MaterialDriveControls.MaterialYieldStrength,
              IECStandardMotor: data.MaterialDriveControls.IECStandardMotor || false,
              NominalMotorSpeed: +data.MaterialDriveControls.NominalMotorSpeed || null,
              MotorSpeed: +data.MaterialDriveControls.MotorSpeed || null,
              MotorPower: +data.MaterialDriveControls.MotorPower,
              Id: guid(),
              FanProjectId: guid(),
              NoiseDataRequired: data.MaterialDriveControls.NoiseDataRequired,
              Drive: data.MaterialDriveControls.Drive,
              FanProject: {
                $ref: "1"
              },
              EntityKey: {
                $id: id().toString(),
                EntitySetName: "MaterialDriveControls",
                EntityContainerName: "FanalytixEntities",
                EntityKeyValues: [
                  {
                    Key: "Id",
                    Type: "System.Guid",
                    Value: guid()
                  }
                ]
              }
            }
          ],
          EntityKey: {
            $id: id().toString(),
            EntitySetName: "FanProjects",
            EntityContainerName: "FanalytixEntities",
            EntityKeyValues: [
              {
                Key: "Id",
                Type: "System.Guid",
                Value: guid()
              }
            ]
          }
        };
        obj.GasDatas[0].GasOperatingPoints = [];
        obj.Noises = [];
        if (data.MaterialDriveControls.NoiseDataRequired) {
          obj.Noises.push({
            $id: id().toString(),
            RoomAbsorptionArea: +data.Noises.RoomAbsorptionArea,
            FanLocation: +data.Noises.FanLocation,
            BackgroundNoiseCorrection: +data.Noises.BackgroundNoiseCorrection,
            Design: +data.Noises.Design,
            HousingMetalPlateThickness: +data.Noises.HousingMetalPlateThickness,
            DistanceBetweenStiffners: data.Noises.DistanceBetweenStiffners,
            HousingMaterial: data.Noises.HousingMaterial,
            Id: guid(),
            FanProjectId: guid(),
            FanProject: {
              $ref: "1"
            },
            EntityKey: {
              $id: id().toString(),
              EntitySetName: "Noises",
              EntityContainerName: "FanalytixEntities",
              EntityKeyValues: [
                {
                  Key: "Id",
                  Type: "System.Guid",
                  Value: guid()
                }
              ]
            }
          });
        }
        _.map(_.range(data.GasOperatingPoints.length), function(i) {
          console.log(convertDpt(data.GasOperatingPoints[i].Dpt, data.GasDatas.DptUnits));
          console.log(convertVp(data.GasOperatingPoints[i].Vp, data.GasDatas.VpUnits));
          obj.GasDatas[0].GasOperatingPoints.push({
            $id: id().toString(),
            T: +data.GasOperatingPoints[i].T,
            Dpt: +convertDpt(data.GasOperatingPoints[i].Dpt, data.GasDatas.DptUnits),
            P1: +data.GasOperatingPoints[i].P1,
            F: +data.GasOperatingPoints[i].F,
            Id: guid(),
            GasDataId: guid(),
            Ro: +data.GasOperatingPoints[i].Ro,
            Vi: data.GasOperatingPoints[i].Vi,
            Vp: parseFloat(convertVp(data.GasOperatingPoints[i].Vp, data.GasDatas.VpUnits)),
            GasData: {
              $ref: "4"
            },
            EntityKey: {
              $id: id().toString(),
              EntitySetName: "GasOperatingPoints",
              EntityContainerName: "FanalytixEntities",
              EntityKeyValues: [
                {
                  Key: "Id",
                  Type: "System.Guid",
                  Value: guid()
                }
              ]
            }
          });
          if (obj.GasDatas[0].VpUnit === 1 || obj.GasDatas[0].VpUnit === 60 || obj.GasDatas[0].VpUnit === 3600) {
            obj.GasDatas[0].VpUnit = 1;
          }
          if (obj.GasDatas[0].DptUnit === 0.101 || obj.GasDatas[0].DptUnit === 0.01 || obj.GasDatas[0].DptUnit === 1 || obj.GasDatas[0].DptUnit === 10) {
            return obj.GasDatas[0].DptUnit = 1;
          }
        });
        return obj;
      } else {
        id = genrateId();
        obj = {
          $id: id().toString(),
          Date: data.Date,
          Engineer: data.Engineer,
          ProjectName: data.ProjectName,
          Proposal_OrderNo: data.Proposal_OrderNo,
          LastUiFormCompleted: null,
          Id: data.Id,
          FanAssemblies: [
            {
              $id: id().toString(),
              Id: data.FanAssemblies.Id,
              FanProjectId: data.FanAssemblies.FanProjectId,
              EvaseOutlet_InletAreaRatio: +data.FanAssemblies.EvaseOutlet_InletAreaRatio,
              OutletSilencer: +data.FanAssemblies.OutletSilencer,
              OutletOtherParts: +data.FanAssemblies.OutletOtherParts,
              InletSoundSilencer: +data.FanAssemblies.InletSoundSilencer,
              InletBox: +data.FanAssemblies.InletBox,
              InletOtherParts: +data.FanAssemblies.InletOtherParts,
              PressureDifference: +data.FanAssemblies.Pressure_Difference,
              FanProject: {
                $ref: "1"
              },
              EntityKey: {
                $id: id().toString(),
                EntitySetName: "FanAssemblies",
                EntityContainerName: "FanalytixEntities",
                EntityKeyValues: [
                  {
                    Key: "Id",
                    Type: "System.Guid",
                    Value: guid()
                  }
                ]
              }
            }
          ],
          FanTypes: [],
          GasDatas: [
            {
              $id: id().toString(),
              BarometricPressure_Elevation: +data.GasDatas.BarometricPressure_Elevation,
              GasDustload: data.GasDatas.GasDustload,
              Id: data.GasDatas.Id,
              FanProjectId: data.GasDatas.FanProjectId,
              VpUnit: calculateVp(data.GasDatas.VpUnits),
              DptUnit: CalcNormalDensity(data.GasDatas.DptUnits),
              GasOperatingPoints: [],
              FanProject: {
                $ref: "1"
              },
              EntityKey: {
                $id: id().toString(),
                EntitySetName: "GasDatas",
                EntityContainerName: "FanalytixEntities",
                EntityKeyValues: [
                  {
                    Key: "Id",
                    Type: "System.Guid",
                    Value: guid()
                  }
                ]
              }
            }
          ],
          UnitValueForInputFields: [],
          MaterialDriveControls: [
            {
              $id: id().toString(),
              InletOutletDuct: +data.MaterialDriveControls.InletOutletDuct,
              Width: +data.MaterialDriveControls.Width,
              DesignType: data.MaterialDriveControls.DesignType,
              BackBlades: data.MaterialDriveControls.BackBlades,
              Control: +data.MaterialDriveControls.Control,
              IVCPosition: data.MaterialDriveControls.IVCPosition,
              MechanicalDesignTemperature: +data.MaterialDriveControls.MechanicalDesignTemperature,
              StandardImpellerMaterial: data.MaterialDriveControls.StandardImpellerMaterial,
              MaterialName: data.MaterialDriveControls.MaterialName,
              MaterialDensity: +data.MaterialDriveControls.MaterialDensity || null,
              MaterialYieldStrength: +data.MaterialDriveControls.MaterialYieldStrength,
              IECStandardMotor: data.MaterialDriveControls.IECStandardMotor || false,
              NominalMotorSpeed: +data.MaterialDriveControls.NominalMotorSpeed || null,
              MotorSpeed: +data.MaterialDriveControls.MotorSpeed || null,
              MotorPower: +data.MaterialDriveControls.MotorPower,
              Id: data.MaterialDriveControls.Id,
              FanProjectId: data.MaterialDriveControls.FanProjectId,
              NoiseDataRequired: data.MaterialDriveControls.NoiseDataRequired,
              Drive: data.MaterialDriveControls.Drive,
              FanProject: {
                $ref: "1"
              },
              EntityKey: {
                $id: id().toString(),
                EntitySetName: "MaterialDriveControls",
                EntityContainerName: "FanalytixEntities",
                EntityKeyValues: [
                  {
                    Key: "Id",
                    Type: "System.Guid",
                    Value: guid()
                  }
                ]
              }
            }
          ],
          EntityKey: {
            $id: id().toString(),
            EntitySetName: "FanProjects",
            EntityContainerName: "FanalytixEntities",
            EntityKeyValues: [
              {
                Key: "Id",
                Type: "System.Guid",
                Value: guid()
              }
            ]
          }
        };
        obj.GasDatas[0].GasOperatingPoints = [];
        obj.Noises = [];
        if (data.MaterialDriveControls.NoiseDataRequired) {
          obj.Noises.push({
            $id: id().toString(),
            RoomAbsorptionArea: +data.Noises.RoomAbsorptionArea,
            FanLocation: +data.Noises.FanLocation,
            BackgroundNoiseCorrection: +data.Noises.BackgroundNoiseCorrection,
            Design: +data.Noises.Design,
            HousingMetalPlateThickness: +data.Noises.HousingMetalPlateThickness,
            DistanceBetweenStiffners: +data.Noises.DistanceBetweenStiffners,
            HousingMaterial: data.Noises.HousingMaterial,
            Id: data.Noises.Id,
            FanProjectId: data.Noises.FanProjectId,
            FanProject: {
              $ref: "1"
            },
            EntityKey: {
              $id: id().toString(),
              EntitySetName: "Noises",
              EntityContainerName: "FanalytixEntities",
              EntityKeyValues: [
                {
                  Key: "Id",
                  Type: "System.Guid",
                  Value: guid()
                }
              ]
            }
          });
        }
        _.map(_.range(data.GasOperatingPoints.length), function(i) {
          console.log(convertDpt(data.GasOperatingPoints[i].Dpt, data.GasDatas.DptUnits));
          console.log(convertVp(data.GasOperatingPoints[i].Vp, data.GasDatas.VpUnits));
          obj.GasDatas[0].GasOperatingPoints.push({
            $id: id().toString(),
            Dpt: +convertDpt(data.GasOperatingPoints[i].Dpt, data.GasDatas.DptUnits),
            P1: +data.GasOperatingPoints[i].P1,
            F: +data.GasOperatingPoints[i].F,
            Id: data.GasOperatingPoints[i].Id,
            GasDataId: data.GasOperatingPoints[i].GasDataId,
            Ro: +data.GasOperatingPoints[i].Ro,
            Vi: data.GasOperatingPoints[i].Vi,
            Vp: parseFloat(convertVp(data.GasOperatingPoints[i].Vp, data.GasDatas.VpUnits)),
            GasData: {
              $ref: "4"
            },
            EntityKey: {
              $id: id().toString(),
              EntitySetName: "GasOperatingPoints",
              EntityContainerName: "FanalytixEntities",
              EntityKeyValues: [
                {
                  Key: "Id",
                  Type: "System.Guid",
                  Value: guid()
                }
              ]
            }
          });
          if (obj.GasDatas[0].VpUnit === 1 || obj.GasDatas[0].VpUnit === 60 || obj.GasDatas[0].VpUnit === 3600) {
            obj.GasDatas[0].VpUnit = 1;
          }
          if (obj.GasDatas[0].DptUnit === 0.101 || obj.GasDatas[0].DptUnit === 0.01 || obj.GasDatas[0].DptUnit === 1 || obj.GasDatas[0].DptUnit === 10) {
            return obj.GasDatas[0].DptUnit = 1;
          }
        });
        console.log(obj, obj.GasDatas[0].VpUnit, obj.GasDatas[0].DptUnit);
        return obj;
      }
    };
    return {
      createJson: createJson,
      data: data,
      density: density,
      FanCoeffients: FanCoeffients,
      checkingOperatingPont: checkingOperatingPont,
      calculateDensity: CalculateDensity
    };
  });

}).call(this);

/*
//@ sourceMappingURL=ProjectDataService.map
*/
